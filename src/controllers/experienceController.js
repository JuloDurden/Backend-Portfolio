const Experience = require('../models/Experience');
const { deleteExperienceImage } = require('../middleware/uploadExperience');

const experienceController = {
  // GET /api/experiences - R√©cup√©rer toutes les exp√©riences (PUBLIC)
  getAllExperiences: async (req, res) => {
    try {
      const { type, sort = 'newest' } = req.query;
      
      let query = {};
      if (type && type !== 'all') {
        query.type = type; // 'work' ou 'education'
      }

      let sortCriteria = {};
      switch (sort) {
        case 'oldest':
          sortCriteria = { startDate: 1 };
          break;
        case 'position':
          sortCriteria = { position: 1 };
          break;
        case 'company':
          sortCriteria = { company: 1 };
          break;
        default: // newest
          sortCriteria = { startDate: -1 };
      }

      const experiences = await Experience.find(query).sort(sortCriteria);

      // Calculer les stats
      const stats = {
        totalWork: await Experience.countDocuments({ type: 'work' }),
        totalEducation: await Experience.countDocuments({ type: 'education' }),
        totalCount: experiences.length,
        currentJobs: await Experience.countDocuments({ 
          type: 'work', 
          endDate: null // En cours
        })
      };

      res.json({
        success: true,
        data: experiences,
        stats
      });
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des exp√©riences:', error);
      res.status(500).json({
        success: false,
        message: 'Erreur serveur'
      });
    }
  },

  // GET /api/experiences/:id - R√©cup√©rer une exp√©rience (PUBLIC)
  getExperienceById: async (req, res) => {
    try {
      const experience = await Experience.findById(req.params.id);
      
      if (!experience) {
        return res.status(404).json({
          success: false,
          message: 'Exp√©rience non trouv√©e'
        });
      }

      res.json({
        success: true,
        data: experience
      });
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de l\'exp√©rience:', error);
      res.status(500).json({
        success: false,
        message: 'Erreur serveur'
      });
    }
  },

  // POST /api/experiences - Cr√©er une exp√©rience (PROT√âG√â)
  createExperience: async (req, res) => {
    try {
      console.log('üìù Donn√©es re√ßues:', req.body);
      console.log('üìÅ Fichier upload√©:', req.uploadedFiles);

      // ‚úÖ VALIDATION DE L'IMAGE
      const image = req.uploadedFiles?.image;
      if (!image) {
        return res.status(400).json({
          success: false,
          message: 'Image obligatoire pour cr√©er une exp√©rience'
        });
      }

      // ‚úÖ VALIDATION ET CONVERSION DES DATES
      let startDate = null;
      let endDate = null;

      if (req.body.startDate) {
        startDate = new Date(req.body.startDate);
        if (isNaN(startDate.getTime())) {
          return res.status(400).json({
            success: false,
            message: 'Format de startDate invalide (utilisez YYYY-MM-DD)'
          });
        }
      }

      if (req.body.endDate) {
        endDate = new Date(req.body.endDate);
        if (isNaN(endDate.getTime())) {
          return res.status(400).json({
            success: false,
            message: 'Format de endDate invalide (utilisez YYYY-MM-DD)'
          });
        }
      }

      // ‚úÖ CONSTRUCTION TABLEAU DESCRIPTION (REGEX CORRIG√âE)
      let description = [];
      
      // 1. R√©cup√©rer depuis description[0], description[1], etc.
      Object.keys(req.body).forEach(key => {
        const match = key.match(/^description

$$
(\d+)
$$

$/);
        if (match) {
          const index = parseInt(match[1]);
          if (req.body[key] && req.body[key].trim()) {
            description[index] = req.body[key].trim();
          }
        }
      });
      
      // 2. Si pas de description[x], essayer le champ direct
      if (description.length === 0 && req.body.description) {
        if (Array.isArray(req.body.description)) {
          description = req.body.description.filter(d => d && d.trim());
        } else if (typeof req.body.description === 'string') {
          description = [req.body.description.trim()];
        }
      }

      // 3. S'assurer d'avoir au moins 3 √©l√©ments non vides
      while (description.length < 3) {
        description.push('Description √† compl√©ter');
      }

      console.log('üìã Description construite:', description);

      // ‚úÖ CONSTRUCTION TABLEAU TECHNOLOGIES (REGEX CORRIG√âE)
      let technologies = [];
      
      Object.keys(req.body).forEach(key => {
        const match = key.match(/^technologies

$$
(\d+)
$$

$/);
        if (match) {
          const index = parseInt(match[1]);
          if (req.body[key] && req.body[key].trim()) {
            technologies[index] = req.body[key].trim();
          }
        }
      });

      // Si pas de technologies[x], essayer le champ direct
      if (technologies.length === 0 && req.body.technologies) {
        if (Array.isArray(req.body.technologies)) {
          technologies = req.body.technologies.filter(t => t && t.trim());
        } else if (typeof req.body.technologies === 'string') {
          technologies = [req.body.technologies.trim()];
        }
      }

      console.log('üîß Technologies construites:', technologies);

      // ‚úÖ VALIDATION CHAMPS OBLIGATOIRES
      if (!req.body.type || !['work', 'education'].includes(req.body.type)) {
        return res.status(400).json({
          success: false,
          message: 'Type requis (work ou education)'
        });
      }

      if (!req.body.position || !req.body.position.trim()) {
        return res.status(400).json({
          success: false,
          message: 'Position est requise'
        });
      }

      if (!startDate) {
        return res.status(400).json({
          success: false,
          message: 'Date de d√©but est requise'
        });
      }

      // ‚úÖ CR√âATION DE L'EXP√âRIENCE
      const experience = new Experience({
        type: req.body.type.trim(),
        position: req.body.position.trim(),
        company: req.body.company ? req.body.company.trim() : '',
        location: req.body.location ? req.body.location.trim() : '',
        startDate: startDate,
        endDate: endDate,
        description: description,
        technologies: technologies,
        image: image // URL Cloudinary compl√®te
      });

      console.log('üíæ Tentative de sauvegarde:', {
        type: experience.type,
        position: experience.position,
        startDate: experience.startDate,
        descriptionLength: experience.description.length,
        hasImage: !!experience.image
      });

      const savedExperience = await experience.save();

      console.log('‚úÖ Exp√©rience sauvegard√©e avec ID:', savedExperience._id);

      res.status(201).json({
        success: true,
        data: savedExperience,
        message: 'Exp√©rience cr√©√©e avec succ√®s'
      });

    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation de l\'exp√©rience:', error);
      
      // Si erreur, supprimer l'image upload√©e sur Cloudinary
      if (req.uploadedFiles?.image) {
        try {
          await deleteExperienceImage(req.uploadedFiles.image);
          console.log('üóëÔ∏è Image supprim√©e apr√®s √©chec cr√©ation');
        } catch (cleanupError) {
          console.error('‚ùå Erreur suppression image cleanup:', cleanupError);
        }
      }

      // Gestion erreurs sp√©cifiques
      if (error.name === 'ValidationError') {
        const validationErrors = Object.values(error.errors).map(err => ({
          field: err.path,
          message: err.message,
          value: err.value
        }));

        console.error('üìã Erreurs de validation:', validationErrors);

        return res.status(400).json({
          success: false,
          message: 'Erreur de validation',
          errors: validationErrors
        });
      }
      
      res.status(500).json({
        success: false,
        message: 'Erreur serveur lors de la cr√©ation',
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  },

  // PUT /api/experiences/:id - Modifier une exp√©rience (PROT√âG√â)
  updateExperience: async (req, res) => {
    try {
      console.log('üîÑ Mise √† jour exp√©rience:', req.params.id);
      console.log('üìù Donn√©es re√ßues:', req.body);

      const experience = await Experience.findById(req.params.id);
      
      if (!experience) {
        return res.status(404).json({
          success: false,
          message: 'Exp√©rience non trouv√©e'
        });
      }

      // Sauvegarder l'ancienne image pour suppression si remplacement
      const oldImage = experience.image;

      // ‚úÖ MISE √Ä JOUR S√âLECTIVE (seulement les champs fournis)
      const updateFields = {};

      if (req.body.type) updateFields.type = req.body.type.trim();
      if (req.body.position) updateFields.position = req.body.position.trim();
      if (req.body.company !== undefined) updateFields.company = req.body.company ? req.body.company.trim() : '';
      if (req.body.location !== undefined) updateFields.location = req.body.location ? req.body.location.trim() : '';
      
      // ‚úÖ VALIDATION DES DATES
      if (req.body.startDate) {
        const parsedStartDate = new Date(req.body.startDate);
        if (!isNaN(parsedStartDate.getTime())) {
          updateFields.startDate = parsedStartDate;
        } else {
          return res.status(400).json({
            success: false,
            message: 'Format de startDate invalide'
          });
        }
      }
      
      if (req.body.endDate !== undefined) {
        if (req.body.endDate) {
          const parsedEndDate = new Date(req.body.endDate);
          if (!isNaN(parsedEndDate.getTime())) {
            updateFields.endDate = parsedEndDate;
          } else {
            return res.status(400).json({
              success: false,
              message: 'Format de endDate invalide'
            });
          }
        } else {
          updateFields.endDate = null; // Job actuel
        }
      }

      // ‚úÖ GESTION DESCRIPTION (REGEX CORRIG√âE)
      if (req.body.description) {
        let description = [];
        
        // R√©cup√©rer depuis description[0], description[1], etc.
        Object.keys(req.body).forEach(key => {
          const match = key.match(/^description

$$
(\d+)
$$

$/);
          if (match) {
            const index = parseInt(match[1]);
            if (req.body[key] && req.body[key].trim()) {
              description[index] = req.body[key].trim();
            }
          }
        });
        
        // Si pas de description[x], utiliser le champ direct
        if (description.length === 0) {
          updateFields.description = Array.isArray(req.body.description) 
            ? req.body.description.filter(d => d && d.trim())
            : [req.body.description].filter(d => d && d.trim());
        } else {
          updateFields.description = description.filter(d => d);
        }
      }

      // ‚úÖ GESTION TECHNOLOGIES (REGEX CORRIG√âE)
      if (req.body.technologies) {
        let technologies = [];
        
        Object.keys(req.body).forEach(key => {
          const match = key.match(/^technologies

$$
(\d+)
$$

$/);
          if (match) {
            const index = parseInt(match[1]);
            if (req.body[key] && req.body[key].trim()) {
              technologies[index] = req.body[key].trim();
            }
          }
        });
        
        if (technologies.length === 0) {
          updateFields.technologies = Array.isArray(req.body.technologies)
            ? req.body.technologies.filter(t => t && t.trim())
            : [req.body.technologies].filter(t => t && t.trim());
        } else {
          updateFields.technologies = technologies.filter(t => t);
        }
      }

      // ‚úÖ GESTION DE L'IMAGE
      if (req.uploadedFiles?.image) {
        updateFields.image = req.uploadedFiles.image; // Nouvelle URL Cloudinary
      }

      console.log('üîÑ Champs √† mettre √† jour:', updateFields);

      // ‚úÖ APPLICATION DES MISES √Ä JOUR
      Object.assign(experience, updateFields);

      const savedExperience = await experience.save();

      // Supprimer l'ancienne image apr√®s succ√®s de la sauvegarde
      if (req.uploadedFiles?.image && oldImage && oldImage !== experience.image) {
        try {
          await deleteExperienceImage(oldImage);
          console.log('üóëÔ∏è Ancienne image supprim√©e');
        } catch (cleanupError) {
          console.error('‚ùå Erreur suppression ancienne image:', cleanupError);
        }
      }

      res.json({
        success: true,
        data: savedExperience,
        message: 'Exp√©rience mise √† jour avec succ√®s'
      });
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour de l\'exp√©rience:', error);
      
      // Si erreur et nouvelle image upload√©e, la supprimer
      if (req.uploadedFiles?.image) {
        try {
          await deleteExperienceImage(req.uploadedFiles.image);
        } catch (cleanupError) {
          console.error('‚ùå Erreur suppression nouvelle image:', cleanupError);
        }
      }

      // Gestion erreurs sp√©cifiques
      if (error.name === 'ValidationError') {
        const validationErrors = Object.values(error.errors).map(err => ({
          field: err.path,
          message: err.message
        }));

        return res.status(400).json({
          success: false,
          message: 'Erreur de validation',
          errors: validationErrors
        });
      }
      
      res.status(500).json({
        success: false,
        message: 'Erreur serveur lors de la mise √† jour'
      });
    }
  },

  // DELETE /api/experiences/:id - Supprimer une exp√©rience (PROT√âG√â)
  deleteExperience: async (req, res) => {
    try {
      const experience = await Experience.findById(req.params.id);
      
      if (!experience) {
        return res.status(404).json({
          success: false,
          message: 'Exp√©rience non trouv√©e'
        });
      }

      // Supprimer l'image de Cloudinary avant de supprimer l'exp√©rience
      if (experience.image) {
        try {
          await deleteExperienceImage(experience.image);
          console.log('üóëÔ∏è Image supprim√©e avant suppression exp√©rience');
        } catch (imageError) {
          console.error('‚ùå Erreur suppression image:', imageError);
          // Continuer m√™me si suppression image √©choue
        }
      }

      await Experience.findByIdAndDelete(req.params.id);

      res.json({
        success: true,
        message: 'Exp√©rience supprim√©e avec succ√®s'
      });
    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression de l\'exp√©rience:', error);
      res.status(500).json({
        success: false,
        message: 'Erreur serveur lors de la suppression'
      });
    }
  }
};

module.exports = experienceController;
